from scipy.stats import norm, poisson, lognorm
from matplotlib import pyplot as plt
x = np.linspace(499,501,10000)
G1 = norm.pdf(x,loc=500.08,scale=0.1)
G2 = norm.pdf(x,loc=500.18,scale=0.1)
g1 = np.random.normal(loc=500.08,scale=0.1,size=10000)
g2 = np.random.normal(loc=500.18,scale=0.1,size=10000)
plt.figure(0)
_ = plt.hist(g1,bins=31,alpha=0.5,density=True, label="Sample M1")
_ = plt.hist(g2,bins=31,alpha=0.5,density = True, label = "Sample M2")
plt.plot(x,G1, label = "PDF M1")
plt.plot(x,G2, label = "PDF M2")
plt.ylabel('Density')
plt.xlabel('Mass [eV]')
plt.legend()
plt.figure(1)
_ = plt.hist(g2-g1,bins=31, density=True, label = 'Misure $m_{\\nu} = M2 - M1$')
plt.ylabel('Density')
plt.xlabel('Mass [eV]')
plt.legend()
xarr = np.linspace(-0.5,0.5,1000)
convoluzione = np.convolve(G1, G2, mode='same')
convoluzione = convoluzione/np.trapz(convoluzione,x)
xmedio = np.trapz(convoluzione*x,x)
newx = x-xmedio+0.1
plt.figure(2)
_ = plt.hist(g2-g1,bins=31, density=True, label = 'Misure $m_{\\nu} = M2 - M1$')
plt.plot(newx,convoluzione/np.trapz(convoluzione,newx), label = 'Convoluzione numerica')
plt.plot(xarr,norm.pdf(xarr,loc=0.1,scale=0.1*np.sqrt(2)),'--',label='Convoluzione analitica')
plt.ylabel('Density')
plt.xlabel('Mass [eV]')
plt.legend()